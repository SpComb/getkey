#!/usr/bin/env python

import argparse
import gnomekeyring as gk
import random
import string
import subprocess
import sys

XSEL = 'xsel'

class Error (Exception) :
    pass

def invoke (cmd, *args) :
    def _invoke (stdin=None) :
        p = subprocess.Popen((cmd, ) + args, stdin=subprocess.PIPE)
        stdout, stderr = p.communicate(input=stdin)

        if stderr :
            print stderr

        return stdout
    
    return _invoke

def generate_key (length=16) :
    chars = string.letters + string.digits

    return ''.join(random.choice(chars) for i in xrange(length))

def list_keys (keyring) :
    try :
        keys = gk.list_item_ids_sync(keyring)
    except gk.Error as ex :
        raise Error("%s: %s: %s" % (keyring, ex.__class__.__name__, ex))

    for key_id in keys :
        try :
            key = gk.item_get_info_sync(keyring, key_id)
        except gk.Error as ex :
            raise Error("%s[%s]: %s: %s" % (keyring, key_id, ex.__class__.__name__, ex))
        
        yield key

def get_key (keyring, key_name) :
    for key in list_keys(keyring) :
        if key.get_display_name() == key_name :
            return key.get_secret()

def put_selection (options, text) :
    invoke(XSEL, '-pi')(text)

def put_key (keyring, key_name, secret) :
    gk.item_create_sync(keyring, 
            type                = gk.ITEM_GENERIC_SECRET,
            display_name        = key_name, 
            attributes          = { },
            secret              = secret,
            update_if_exists    = 0,
    )

def main (argv) :
    parser = argparse.ArgumentParser()
    parser.add_argument('--keyring', metavar='KEYRING',
            help="Name of keyring to find")
    parser.add_argument('-L', '--list-keyrings', action='store_true',
            help="List names of keyrings")
    parser.add_argument('-l', '--list', action='store_true',
            help="List names of keys")
    parser.add_argument('-s', '--selection', action='store_true',
            help="Store to selection")
    parser.add_argument('-g', '--generate', action='store_true',
            help="Generate new key")
    parser.add_argument('--generate-length', type=int, default=16,
            help="Generate key length")
    parser.add_argument('key', nargs='*',
            help="Name of key")

    options = parser.parse_args(argv[1:])

    try :
        if options.list_keyrings :
            for keyring in gk.list_keyring_names_sync() :
                print keyring

        if options.list :
            for key in list_keys(options.keyring) :
                print key.get_display_name()
        
        for key in options.key :
            if options.generate :
                secret = generate_key(options.generate_length)
                put_key(options.keyring, key, secret)
            else :
                secret = get_key(options.keyring, key)

            if options.selection :
                put_selection(options, secret)
            else :
                print secret
        

    except Error as ex :
        print >>sys.stderr, "Error:", ex
        return 1

    else :
        return 0

if __name__ == '__main__' :
    sys.exit(main(sys.argv))
