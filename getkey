#!/usr/bin/env python3

import argparse
import fnmatch
import getpass
import logging
import os
import os.path
import random
import secretstorage
import string
import subprocess
import sys

log = logging.getLogger('getkey')

WAYLAND = bool(os.getenv('WAYLAND_DISPLAY'))
CHARSET = 'utf-8'
MIMETYPE = 'text/plain;charset=' + CHARSET

def cmd(cmd, *args, **env):
    """
        Return a wrapper for executing a command with args and stdin/stdout
    """
    def _invoke (stdin=None, stdout=True):
        p = subprocess.Popen((cmd, ) + args,
                stdin   = subprocess.PIPE if stdin else subprocess.DEVNULL,
                stdout  = subprocess.PIPE if stdout else subprocess.DEVNULL,
                env     = env or None,
        )
        stdout, stderr = p.communicate(input=stdin.encode(CHARSET))

        return stdout
    
    return _invoke

def selection(text, primary=None, once=None, wait=None):
    """
        Place given text into the selection, waiting until copied and then returning.
    """

    if WAYLAND:
        args = []

        if primary:
            args.append('--primary')

        args.append('--trim-newline')

        if once:
            args.append('--paste-once')

        if wait:
            args.append('--foreground')

        args.append('--type=' + MIMETYPE)

        cmd('wl-copy', *args)(text, stdout=False)
    else:
        selection = 'clipboard'

        if primary:
            selection = 'primary'

        if once is None:
            cmd('xclip', '-selection', selection, '-in', '-silent')(text, stdout=False)
        else:
            cmd('xclip', '-selection', selection, '-loops', str(1), '-quiet', '-in')(text, stdout=False)

GENERATE_LENGTH = 16
GENERATE_RANDOM = random.SystemRandom()
GENERATE_ALPHABET = string.ascii_letters + string.digits
GENERATE_ALPHABET_SPECIAL = GENERATE_ALPHABET + string.punctuation

def generate (length=GENERATE_LENGTH, random=GENERATE_RANDOM, alphabet=GENERATE_ALPHABET) :
    return ''.join(random.choice(alphabet) for i in range(length))

def prompt (prompt):
    return getpass.getpass(prompt)

class Error(Exception):
    pass

class Cache:
    def __init__(self, path):
        self.path = path

        self._last = None
        self._list = self._load()

    def _load (self):
        cache = { }

        try:
            with open(self.path, 'r') as cache_file:
                for i, line in enumerate(cache_file, 1):
                    line = line.strip()

                    cache[line] = i

                    log.debug("Cache.load: %s", line)

                    self._last = line

        except FileNotFoundError:
            pass

        return cache

    def list(self):
        """
            Returns a {name: i} dict mapping each item to a rising priority starting from 1 for the oldest item.

            Returns an empty dict if the cache does not exist.
        """

        return self._list

    def get(self, name):
        """
            Returns ascending int ordering for item. Unused items have an order of 0, and most recently used items have
            the highest ordering.
        """

        return self._list.get(name, 0)
  
    def _getkey(self, item):
        name, object = item

        return self.get(name)

    def sort(self, items):
        """
            Sort { name: object } into [(name, object)] ordered by cache.
        """

        return sorted(items.items(), key=self._getkey, reverse=True)

    def put(self, name):
        """
            Write most recently used item to the cache.
        """

        if name == self._last:
            # optimization to not store most recently used key again
            return
        
        log.debug("Cache.put %s (last=%s)", name, self._last)

        with open(self.path, 'a') as cache_file:
            print(name, file=cache_file)

def collection_items(collection):
    items = {}

    for item in collection.search_items({}):
        items[item.get_label()] = item

    return items

def all_items(bus):
    default_collection = secretstorage.get_default_collection(bus)
    collections = secretstorage.get_all_collections(bus)

    # all items from all collections
    items = {}

    for collection in collections:
        for item in collection.search_items({}):
            items[item.get_label()] = item

    # prioritize items from default collection
    for item in default_collection.search_items({}):
        items[item.get_label()] = item

    return items

def run(bus, args):
    if args.list_cache:
        cache = Cache(args.list_cache)
    else:
        cache = None

    # collections
    if args.list_keyrings:
        for collection in secretstorage.get_all_collections(bus):
            dir, name = os.path.split(collection.collection_path)

            assert dir == '/org/freedesktop/secrets/collection', "Invalid dir: " + dir

            print(name)
   
    # collection
    if args.keyring:
        path = os.path.join('/org/freedesktop/secrets/collection', args.keyring)

        try:
            collection = secretstorage.Collection(bus, path)
        except secretstorage.ItemNotFoundException:
            raise Error("Keyring not found: " + args.keyring)

        if args.unlock and collection.is_locked():
            collection.unlock()

        items = collection_items(collection)
    else:
        items = all_items(bus)

    if args.list:
        # cache ordering?
        if cache:
            items_list = cache.sort(items)
        else:
            # unordered
            items_list = items.items()

        for name, item in items_list:
            if item.is_locked():
                # XXX: print item id?
                continue

            if args.key and not fnmatch.fnmatch(name, args.key):
                continue

            print(name)
            
            if args.verbose:
                for key, value in item.get_attributes().items():
                    print("", key, value)

    elif args.key:
        item = items.get(args.key)

        # secret
        if args.input_prompt:
            secret = prompt("Secret for key " + args.key + ": ")

        elif args.generate:
            secret = generate(
                    length   = args.generate_length,
                    alphabet = args.generate_alphabet,
            )
        elif item:
            secret = item.get_secret().decode('utf-8')
        else:
            raise Error("Key not found: " + args.key)
        
        # modify
        if args.update:
            item.set_secret(secret)

        elif args.input_prompt or args.generate:
            # do not create a second copy
            if item:
                raise Error("Key already exists: " + args.key)

            # create new item in -k keyring, or the default keyring
            item = collection.create_item(args.key, {}, secret)

        # output
        if args.output:
            print(secret)

        if args.selection_clipboard:
            selection(secret, once=args.selection_once, wait=args.selection_wait)
        if args.selection_primary:
            selection(secret, primary=True, once=args.selection_once, wait=args.selection_wait)

        # cache ordering?
        if cache:
            cache.put(item.get_label())

def main(argv):
    parser = argparse.ArgumentParser()
    parser.set_defaults(
        logging_level       = logging.WARN,
        generate_alphabet   = GENERATE_ALPHABET,
    )
    parser.add_argument('--debug', action='store_const', dest='logging_level', const=logging.DEBUG,
            help="List attributes")
    parser.add_argument('-L', '--list-keyrings', action='store_true',
            help="List available keyrings")
    parser.add_argument('-k', '--keyring', metavar='KEYRING',
            help="Use specific keyring. Default is to list all keyrings and create in default keyring.")
    parser.add_argument('-U', '--unlock', action='store_true',
            help="Unlock keyring if required")
    parser.add_argument('-l', '--list', action='store_true',
            help="List key names, filtering by given pattern")
    parser.add_argument('-C', '--list-cache', metavar='PATH',
            help="Store cache of selected keys, to list most recently used keys first")
    parser.add_argument('-v', '--verbose', action='store_true',
            help="List attributes")
    parser.add_argument('key', metavar='KEY', nargs='?',
            help="Key name, or list filter")
    parser.add_argument('-o', '--output', action='store_true',
            help="Output secret")
    parser.add_argument('--selection-clipboard', action='store_true',
            help="Select secret (copy into clipboard)")
    parser.add_argument('--selection-primary', action='store_true',
            help="Select secret (copy into primary)")
    parser.add_argument('--selection-once', action='store_true',
            help="Select secret once, then clear")
    parser.add_argument('--selection-wait', action='store_true',
            help="Select and wait for paste")
    parser.add_argument('-s', '--selection', action='store_true',
            help="Select secret (copy into clipboard, once, wait)")
    parser.add_argument('-g', '--generate', action='store_true',
            help="Generate new key")
    parser.add_argument('--generate-special', action='store_const', dest='generate_alphabet', const=GENERATE_ALPHABET_SPECIAL,
            help="Generate with special characters")
    parser.add_argument('--generate-length', type=int, default=GENERATE_LENGTH,
            help="Generate key length")
    parser.add_argument('-u', '--update', action='store_true',
            help="Update existing key")
    parser.add_argument('-I', '--input-prompt', action='store_true',
            help="Prompt for password to store")

    args = parser.parse_args(argv[1:])

    logging.basicConfig(
        level   = args.logging_level,
    )

    if args.selection:
        args.selection_clipboard = True
        args.selection_once = True
        args.selection_wait = True

    try:
        bus = secretstorage.dbus_init()

        run(bus, args)

    except Error as error:
        print(error, file=sys.stderr)
        return 2

    else:
        return 0

if __name__ == '__main__' :
    sys.exit(main(sys.argv))
